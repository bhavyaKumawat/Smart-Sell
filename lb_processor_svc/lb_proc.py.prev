import json
import logging
import os

from azure.identity.aio import DefaultAzureCredential
from azure.servicebus import ServiceBusClient
from azure.servicebus.exceptions import ServiceBusAuthorizationError
from commons.blob_msi_util import blob_exists, read_blob, write_sm_blob
from commons.utils import get_emp_key, get_store_key
from azure.core.exceptions import ClientAuthenticationError
import asyncio

logger = logging.getLogger('smartsell')

sb_ns_endpoint = 'sb://{0}.servicebus.windows.net'.format(os.environ['sb_ns_name'])
credential = DefaultAzureCredential()
lb_queue_name = os.environ["lb_queue_name"]
container_name = os.environ["lb_container_name"]


async def process_emp(sm_element_str: str):
    sm_element = json.loads(sm_element_str)
    employee_key = get_emp_key(sm_element)
    await perform_blob_ops(employee_key,
                           sm_element['SmartSellAmount'],
                           sm_element['SmartSellDeclined'])


async def process_store(sm_element_str: str):
    sm_element = json.loads(sm_element_str)
    store_key = get_store_key(sm_element)
    await perform_blob_ops(store_key,
                           sm_element['SmartSellAmount'],
                           sm_element['SmartSellDeclined'])


async def perform_blob_ops(blob_name: str,
                           upsell_amt: float,
                           upsell_declined: int):
    if await blob_exists(container_name, blob_name):
        logger.info(f'Record Exists: {blob_name}')
        blob_str = await read_blob(container_name, blob_name)
        existing_emp = json.loads(blob_str)
        update_emp_rec = {}

        if upsell_declined != 0:
            update_emp_rec['SmartSellAmount'] =\
                existing_emp['SmartSellAmount']
            update_emp_rec['SuccessSmartSellCount'] =\
                existing_emp['SuccessSmartSellCount']
        else:
            update_emp_rec['SmartSellAmount'] =\
                existing_emp['SuccessSmartSellCount'] + upsell_amt
            update_emp_rec['SuccessSmartSellCount'] =\
                existing_emp['SuccessSmartSellCount'] + 1

        update_emp_rec['TotalSmartSellCount'] = \
            existing_emp['SuccessSmartSellCount'] + 1
        await write_sm_blob(container_name, blob_name, update_emp_rec)
        logger.info(f'Record Updated: {blob_name}')
    else:
        new_emp_rec = \
            {'SmartSellAmount': 1, 'SuccessSmartSellCount': 1, 'TotalSmartSellCount': 1, }
        await write_sm_blob(container_name, blob_name, new_emp_rec)
        logger.info(f'Created New Employee Record: {blob_name}')


async def process_sm_lb():
    try:
        sb_client = ServiceBusClient(sb_ns_endpoint, credential)
        with sb_client:
            logger.debug('Inside service bus client')
            receiver = sb_client.get_queue_receiver(queue_name=lb_queue_name)
            logger.debug('After Receiver is created....')
            with receiver:
                logger.info(f'Receiver Active on {lb_queue_name}')
                for msg in receiver:
                    logger.debug("Received SmartSell Event: " + str(msg))
                    await asyncio.gather(process_emp(str(msg)),
                                         process_store(str(msg)))
                    receiver.complete_message(msg)
                    logger.debug(f'Message Removed from {lb_queue_name}....')
    except (ClientAuthenticationError, ServiceBusAuthorizationError) as ca_error:
        logger.exception(f'Exception While Creating Queue Receiver: {ca_error!r}')
